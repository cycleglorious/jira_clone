name: Release Trigger

on:
  push:
    tags:
      - "v*"

permissions:
  id-token: write
  contents: read

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create dummy .env for linting
        run: |
          echo "NODE_ENV='development'" > .env
          echo "DATABASE_URL='postgresql://user:pass@host:5432/db'" >> .env
          echo "UPSTASH_REDIS_REST_URL='dummy'" >> .env
          echo "UPSTASH_REDIS_REST_TOKEN='dummy'" >> .env

      - name: Run Linter via Docker
        run: |
          docker build --target lint --tag jira-clone-lint --progress=plain .

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create dummy .env for testing
        run: |
          echo "NODE_ENV='test'" > .env
          echo "DATABASE_URL='postgresql://user:pass@host:5432/db_test'" >> .env
          echo "UPSTASH_REDIS_REST_URL='dummy'" >> .env
          echo "UPSTASH_REDIS_REST_TOKEN='dummy'" >> .env

      - name: Run Tests via Docker
        run: |
          docker build --target test --tag jira-clone-test --progress=plain .

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      ZIP_NAME: build-${{ github.ref_name }}.zip
      S3_BUCKET_NAME: jira-clone-deployment-dev
      BEANSTALK_APP_NAME: jira-clone
      BEANSTALK_ENV_NAME: jira-clone-dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create dummy .env for testing
        run: |
          echo "NODE_ENV='test'" > .env
          echo "DATABASE_URL='postgresql://user:pass@host:5432/db_test'" >> .env
          echo "UPSTASH_REDIS_REST_URL='dummy'" >> .env
          echo "UPSTASH_REDIS_REST_TOKEN='dummy'" >> .env

      - name: "Build Docker Image"
        run: |
          docker build --tag jira-clone:latest .

      - name: "Extract build artifact from Docker image"
        run: |
          IMAGE_ID=$(docker create jira-clone:latest)
          docker cp $IMAGE_ID:/app/ ./dist
          docker rm $IMAGE_ID

      - name: Zip the build folder
        run: |
          cd dist
          zip -r ../${{ env.ZIP_NAME }} .
          cd ..

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::792642165337:role/GitHubAction-AssumeRoleWithAction
          aws-region: eu-north-1

      - name: Upload to S3
        run: |
          aws s3 cp ${{ env.ZIP_NAME }} s3://${{ env.S3_BUCKET_NAME }}/${{ env.ZIP_NAME }}

      - name: Create Beanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name "${{ env.BEANSTALK_APP_NAME }}" \
            --version-label "${{ github.ref_name }}" \
            --description "Commit ${{ github.sha }}" \
            --source-bundle S3Bucket="${{ env.S3_BUCKET_NAME }}",S3Key="${{ env.ZIP_NAME }}"
      
      - name: Deploy to Beanstalk Environment
        run: |
          aws elasticbeanstalk update-environment \
            --application-name "${{ env.BEANSTALK_APP_NAME }}" \
            --environment-name "${{ env.BEANSTALK_ENV_NAME }}" \
            --version-label "${{ github.ref_name }}"

      - name: "Upload build artifact"
        uses: actions/upload-artifact@v4
        with:
          name: jira-clone-app
          path: ${{ env.ZIP_NAME }}
