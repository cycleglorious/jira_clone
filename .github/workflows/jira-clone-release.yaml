name: Release Trigger

on:
  push:
    tags:
      - "v*"

permissions:
  id-token: write
  contents: read

jobs:
  # lint:
  #   name: Lint Code
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Create dummy .env for linting
  #       run: |
  #         echo "NODE_ENV='development'" > .env
  #         echo "DATABASE_URL='postgresql://user:pass@host:5432/db'" >> .env
  #         echo "UPSTASH_REDIS_REST_URL='dummy'" >> .env
  #         echo "UPSTASH_REDIS_REST_TOKEN='dummy'" >> .env

  #     - name: Run Linter via Docker
  #       run: |
  #         docker build --target lint --tag jira-clone-lint --progress=plain .

  # test:
  #   name: Run Unit Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Create dummy .env for testing
  #       run: |
  #         echo "NODE_ENV='test'" > .env
  #         echo "DATABASE_URL='postgresql://user:pass@host:5432/db_test'" >> .env
  #         echo "UPSTASH_REDIS_REST_URL='dummy'" >> .env
  #         echo "UPSTASH_REDIS_REST_TOKEN='dummy'" >> .env

  #     - name: Run Tests via Docker
  #       run: |
  #         docker build --target test --tag jira-clone-test --progress=plain .

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    env:
      ZIP_NAME: build-${{ github.ref_name }}.zip
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create dummy .env for testing
        run: |
          echo "NODE_ENV='test'" > .env
          echo "DATABASE_URL='postgresql://user:pass@host:5432/db_test'" >> .env
          echo "UPSTASH_REDIS_REST_URL='dummy'" >> .env
          echo "UPSTASH_REDIS_REST_TOKEN='dummy'" >> .env

      - name: "Build Docker Image"
        run: |
          docker build --tag jira-clone:latest .

      - name: "Extract build artifact from Docker image"
        run: |
          IMAGE_ID=$(docker create jira-clone:latest)
          docker cp $IMAGE_ID:/app/ ./dist
          docker rm $IMAGE_ID

      - name: Zip the build folder
        run: |
          cd dist
          zip -r ../${{ env.ZIP_NAME }} .


      - name: "Upload build artifact"
        uses: actions/upload-artifact@v4
        with:
          name: jira-clone-app
          path: ${{ env.ZIP_NAME }}
